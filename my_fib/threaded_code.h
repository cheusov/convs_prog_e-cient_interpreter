/*
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the Software,
 * and to prepare derivative works of the Software, and to permit
 * third-parties to whom the Software is furnished to do so, all subject
 * to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole
 * or in part, and all derivative works of the Software, unless such
 * copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language
 * processor.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
 * LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

#include <stdint.h>

#include "defs.h"

extern uintptr_t tc[];

void tc_init(void);
void tc_insert_value(uintptr_t value);
void tc_insert_call(command_t f);
void tc_insert_call1(command_t f, uintptr_t value);
void tc_insert_call2(command_t f, uintptr_t v1, uintptr_t v2);
void tc_insert_call3(command_t f, uintptr_t v1, uintptr_t v2, uintptr_t v3);
void tc_insert_jump1(command_t f, const char *jump);
void tc_insert_jump2(command_t f, uintptr_t value, const char *jump);
void tc_insert_jump3(command_t f, uintptr_t v1, uintptr_t v2, const char *jump);
void tc_label(const char *label);
void tc_resolve(void);
void tc_destroy(void);

//
#define UNI_PRINTLN_CHARS(str)         tc_insert_call1(uni_println_charS, (uintptr_t) str);

// Basic Forth-like SVM commands
#define SVM_ADD_UINT                   tc_insert_call(svm_add_uint);
#define SVM_SUBTRACT_UINT              tc_insert_call(svm_subtract_uint);
#define SVM_DEC                        tc_insert_call(svm_dec);
#define SVM_DUP                        tc_insert_call(svm_dup);
#define SVM_SWAP                       tc_insert_call(svm_swap);
#define SVM_EQ                         tc_insert_call(svm_eq);
#define SVM_NEQ                        tc_insert_call(svm_neq);
#define SVM_PRINTLN_UINT                 tc_insert_call(svm_println_uint);
#define SVM_PUSH(value)                tc_insert_call1(svm_push, value);
#define SVM_DROP                       tc_insert_call(svm_drop);
#define SVM_NOP                        tc_insert_call(svm_nop);
#define SVM_CALL(offset)               tc_insert_jump1(svm_call, offset);
#define SVM_JUMP(label)                tc_insert_jump1(svm_jump, label);
#define SVM_JUMP_IF_ZERO(offset)       tc_insert_jump1(svm_jump_if_zero, offset);
#define SVM_JUMP_IF_NOTZERO(offset)    tc_insert_jump1(svm_jump_if_notzero, offset);
#define SVM_RET                        tc_insert_call(svm_ret);
#define SVM_EXIT                       tc_insert_call(svm_exit);
#define LABEL(label)                   tc_label(label);
#define ______Function______(label)    tc_label(label);
#define ______(label)                  tc_label(label);

// Extended SVM commands for better efficiency
#define SVM_JUMP_AND_DROP_IF_ZERO(offset)      tc_insert_jump1(svm_jump_and_drop_if_zero, offset);
#define SVM_JUMP_AND_DROP_IF_EQ_CONST(value, offset) tc_insert_jump2(svm_jump_and_drop_if_eq_const, value, offset);
#define SVM_DUP_JUMP_IF_ZERO(offset)           tc_insert_jump1(svm_dup_jump_if_zero, offset);
#define SVM_DUP_JUMP_IF_EQ_CONST(value, offset)      tc_insert_jump2(svm_dup_jump_if_eq_const, value, offset);
#define SVM_DUP_JUMP_IF_LE_CONST(value, offset)      tc_insert_jump2(svm_dup_jump_if_le_const, value, offset);
#define SVM_DROP_PUSH(value)           tc_insert_call1(svm_drop_push, value);
#define SVM_DROP_PUSH0                 tc_insert_call(svm_drop_push0);
#define SVM_PUSH0                      tc_insert_call(svm_push0);
#define SVM_PUSH_RET(value)            tc_insert_call1(svm_push_ret, value);



// RVM commands
#define RVM_CALL1(result_reg, arg_reg, offset)    tc_insert_jump3(rvm_call, -result_reg, -arg_reg, offset);
#define RVM_SET(result_reg, value)                tc_insert_call2(rvm_set, -result_reg, value);
#define RVM_PRINTLN_UINT(arg_reg)                 tc_insert_call1(rvm_println_uint, -arg_reg);
#define RVM_EXIT                                  tc_insert_call(rvm_exit);
#define RVM_RET(return_reg)                       tc_insert_call1(rvm_ret, -return_reg);
#define RVM_DEC(result_reg, arg_reg)              tc_insert_call2(rvm_dec, -result_reg, -arg_reg);
#define RVM_DEC1(result_reg)                      tc_insert_call1(rvm_dec1, -result_reg);
#define RVM_ADD(result_reg, a_reg, b_reg)         tc_insert_call3(rvm_add, -result_reg, -a_reg, -b_reg);
#define RVM_ADD1(result_reg, value_reg)           tc_insert_call2(rvm_add1, -result_reg, -value_reg);
#define RVM_JUMP_IF_ZERO(arg_reg, offset)         tc_insert_jump2(rvm_jump_if_zero, -arg_reg, offset);
#define RVM_JUMP_IF_EQ_CONST(arg_reg, value, offset) tc_insert_jump3(rvm_jump_if_eq_const, -arg_reg, value, offset);
#define RVM_JUMP_IF_LE_CONST(arg_reg, value, offset) tc_insert_jump3(rvm_jump_if_le_const, -arg_reg, value, offset);
#define RVM_FRAMESIZE(frame_size)                 assert(frame_size < interp_page_size()); tc_insert_value(frame_size);
