/*
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the Software,
 * and to prepare derivative works of the Software, and to permit
 * third-parties to whom the Software is furnished to do so, all subject
 * to the following:
 *
 * The copyright notices in the Software and this entire statement,
 * including the above license grant, this restriction and the following
 * disclaimer, must be included in all copies of the Software, in whole
 * or in part, and all derivative works of the Software, unless such
 * copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language
 * processor.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
 * LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

#include "defs.h"

//
CMD_DECL(uni_println_charS)

// basic Forth-like stack-based virtual machine (SVM) commands
CMD_DECL(svm_add_uint)
CMD_DECL(svm_subtract_uint)
CMD_DECL(svm_dec)
CMD_DECL(svm_dup)
CMD_DECL(svm_swap)
CMD_DECL(svm_eq)
CMD_DECL(svm_neq)
CMD_DECL(svm_println_uint)
CMD_DECL(svm_push)
CMD_DECL(svm_push0)
CMD_DECL(svm_drop)
CMD_DECL(svm_nop)
CMD_DECL(svm_call)
CMD_DECL(svm_jump)
CMD_DECL(svm_jump_if_zero)
CMD_DECL(svm_jump_if_notzero)
CMD_DECL(svm_ret)
CMD_DECL(svm_exit)

// Extended commands for better efficiency
CMD_DECL(svm_dup_jump_if_zero)       // check top value and jump if 0
CMD_DECL(svm_dup_jump_if_eq_const)         // check top value and jump if equals to constant
CMD_DECL(svm_dup_jump_if_le_const)         // check top value and jump if <= constant
CMD_DECL(svm_jump_and_drop_if_zero)  // check top value, jump if 0 and drop if succeeded
CMD_DECL(svm_jump_and_drop_if_eq_const)    // check top value, jump if eq and drop if succeeded
CMD_DECL(svm_drop_push)              // set top stack value to constant
CMD_DECL(svm_drop_push0)             // set top stack value to 0
CMD_DECL(svm_push_ret)               // return constant
